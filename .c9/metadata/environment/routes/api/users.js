{"filter":false,"title":"users.js","tooltip":"/routes/api/users.js","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":7,"column":24},"action":"insert","lines":["const express = require('express');","const router = express.Router();","","router.get('/test', (req, res) => res.json({ ","    msg: 'Users works'","}));","","module.exports = router;"],"id":1}],[{"start":{"row":4,"column":10},"end":{"row":4,"column":15},"action":"remove","lines":["Users"],"id":2},{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"insert","lines":["E"]},{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"insert","lines":["a"]},{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"remove","lines":["t"],"id":3},{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"remove","lines":["a"]},{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"remove","lines":["E"]}],[{"start":{"row":4,"column":10},"end":{"row":4,"column":11},"action":"insert","lines":["U"],"id":4},{"start":{"row":4,"column":11},"end":{"row":4,"column":12},"action":"insert","lines":["s"]},{"start":{"row":4,"column":12},"end":{"row":4,"column":13},"action":"insert","lines":["e"]},{"start":{"row":4,"column":13},"end":{"row":4,"column":14},"action":"insert","lines":["r"]},{"start":{"row":4,"column":14},"end":{"row":4,"column":15},"action":"insert","lines":["s"]}],[{"start":{"row":0,"column":0},"end":{"row":7,"column":24},"action":"remove","lines":["const express = require('express');","const router = express.Router();","","router.get('/test', (req, res) => res.json({ ","    msg: 'Users works'","}));","","module.exports = router;"],"id":5},{"start":{"row":0,"column":0},"end":{"row":125,"column":24},"action":"insert","lines":["const express = require('express');","const router = express.Router();","const gravatar = require('gravatar');","const bcrypt = require('bcryptjs');","const jwt = require('jsonwebtoken');","const keys = require('../../config/keys');","const passport = require('passport');","","const validateRegisterInput = require('../../validation/register');","const validateLoginInput = require('../../validation/login');","","const User = require('../../models/User');","","","// route:   GET api/users/test","// desc:    Test 'users' route","// access:  Public","router.get('/test', (req, res) => res.json({ ","    msg: 'Users works'","}));","","// route:   GET api/users/register","// desc:    Register a user","// access:  Public","router.post('/register', (req, res) => { ","    const { errors, isValid } = validateRegisterInput(req.body);","    ","    if (!isValid) {","        return res.status(400).json(errors);","    }","    ","    User.findOne({ email: req.body.email })","        .then(user => {","            if (user) {","                errors.email = 'Email already exists';","                return res.status(400).json(errors);","            } else {","                const avatar = gravatar.url(req.body.email, {","                    s: '200',   // size","                    r: 'pg',    // rating","                    d: 'mm'     // default","                });","                ","                const newUser = new User({ ","                    name: req.body.name,","                    email: req.body.email,","                    avatar,","                    password: req.body.password","                });","                ","                bcrypt.genSalt(10, (err, salt) => {","                    bcrypt.hash(newUser.password, salt, (err, hash) => {","                        if (err) throw err;","                        newUser.password = hash;","                        newUser.save()","                            .then(user => res.json(user))","                            .catch(err => console.log(err));","                    });","                });","            }","        });","});","","// route:   GET api/users/login","// desc:    Login user, return JWT token","// access:  Public","router.post('/login', (req, res) => {","    const { errors, isValid } = validateLoginInput(req.body);","    ","    if (!isValid) {","        return res.status(400).json(errors);","    }","    ","    const email = req.body.email;","    const password = req.body.password;","    ","    User.findOne({ email })","        .then(user => {","            if (!user) {","                errors.email = 'User not found';","                return res.status(400).json(errors);","            }","            ","            bcrypt.compare(password, user.password)","                .then(isMatch => {","                    if (isMatch) {","                        const payload = {","                            id: user.id,","                            name: user.name,","                            avatar: user.avatar","                        };","                        ","                        jwt.sign(","                            payload, ","                            keys.secretOrKey, ","                            { expiredIn: 3600 }, ","                            (err, token) => {","                                res.json({","                                    success: true,","                                    token: 'Bearer ' + token","                                });","                            });","                    } else {","                        errors.password = 'Password incorrect';","                        return res.status(400).json(errors);","                    }","                });","        });","});","","// route:   GET api/users/current","// desc:    Return current user","// access:  Private","router.get(","    '/current', ","    passport.authenticate('jwt', { session: false }), ","    (req, res) => {","        res.json({ ","            id: req.user.id,","            name: req.user.name,","            email: req.user.email","        });","    }",");","","module.exports = router;"]}]]},"ace":{"folds":[],"scrolltop":1314,"scrollleft":0,"selection":{"start":{"row":125,"column":24},"end":{"row":125,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":92,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1530293247750,"hash":"d464ebc22b07d796ddd73c7210a9a41cc3f67863"}